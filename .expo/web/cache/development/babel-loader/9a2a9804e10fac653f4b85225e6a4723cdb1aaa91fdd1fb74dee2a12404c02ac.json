{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport codegenNativeCommands from '../../Utilities/codegenNativeCommands';\nimport codegenNativeComponent from '../../Utilities/codegenNativeComponent';\nimport * as React from 'react';\nvar NativeComponentRegistry = require('react-native/Libraries/NativeComponent/NativeComponentRegistry');\nvar _require = require('react-native/Libraries/NativeComponent/ViewConfigIgnore'),\n  ConditionallyIgnoredEventHandlers = _require.ConditionallyIgnoredEventHandlers;\nvar _require2 = require(\"react-native/Libraries/ReactNative/RendererProxy\"),\n  dispatchCommand = _require2.dispatchCommand;\nvar nativeComponentName = 'AndroidSwipeRefreshLayout';\nexport var __INTERNAL_VIEW_CONFIG = {\n  uiViewClassName: 'AndroidSwipeRefreshLayout',\n  directEventTypes: {\n    topRefresh: {\n      registrationName: 'onRefresh'\n    }\n  },\n  validAttributes: _objectSpread({\n    enabled: true,\n    colors: {\n      process: require('react-native/Libraries/StyleSheet/processColorArray')\n    },\n    progressBackgroundColor: {\n      process: require('react-native/Libraries/StyleSheet/processColor').default\n    },\n    size: true,\n    progressViewOffset: true,\n    refreshing: true\n  }, ConditionallyIgnoredEventHandlers({\n    onRefresh: true\n  }))\n};\nexport default NativeComponentRegistry.get(nativeComponentName, function () {\n  return __INTERNAL_VIEW_CONFIG;\n});\nexport var Commands = {\n  setNativeRefreshing: function setNativeRefreshing(ref, value) {\n    dispatchCommand(ref, \"setNativeRefreshing\", [value]);\n  }\n};","map":{"version":3,"names":["codegenNativeCommands","codegenNativeComponent","React","NativeComponentRegistry","require","_require","ConditionallyIgnoredEventHandlers","_require2","dispatchCommand","nativeComponentName","__INTERNAL_VIEW_CONFIG","uiViewClassName","directEventTypes","topRefresh","registrationName","validAttributes","_objectSpread","enabled","colors","process","progressBackgroundColor","default","size","progressViewOffset","refreshing","onRefresh","get","Commands","setNativeRefreshing","ref","value"],"sources":["C:/Users/dudug/OneDrive/Área de Trabalho/projetos-reactnative/carroai-passageiro-fe-app/node_modules/react-native/Libraries/Components/RefreshControl/AndroidSwipeRefreshLayoutNativeComponent.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {HostComponent} from '../../Renderer/shims/ReactNativeTypes';\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {\n  DirectEventHandler,\n  Float,\n  WithDefault,\n} from '../../Types/CodegenTypes';\nimport type {ViewProps} from '../View/ViewPropTypes';\n\nimport codegenNativeCommands from '../../Utilities/codegenNativeCommands';\nimport codegenNativeComponent from '../../Utilities/codegenNativeComponent';\nimport * as React from 'react';\n\ntype NativeProps = $ReadOnly<{|\n  ...ViewProps,\n\n  /**\n   * Whether the pull to refresh functionality is enabled.\n   */\n  enabled?: WithDefault<boolean, true>,\n  /**\n   * The colors (at least one) that will be used to draw the refresh indicator.\n   */\n  colors?: ?$ReadOnlyArray<ColorValue>,\n  /**\n   * The background color of the refresh indicator.\n   */\n  progressBackgroundColor?: ?ColorValue,\n  /**\n   * Size of the refresh indicator.\n   */\n  size?: WithDefault<'default' | 'large', 'default'>,\n  /**\n   * Progress view top offset\n   */\n  progressViewOffset?: WithDefault<Float, 0>,\n\n  /**\n   * Called when the view starts refreshing.\n   */\n  onRefresh?: ?DirectEventHandler<null>,\n\n  /**\n   * Whether the view should be indicating an active refresh.\n   */\n  refreshing: boolean,\n|}>;\n\ntype NativeType = HostComponent<NativeProps>;\n\ninterface NativeCommands {\n  +setNativeRefreshing: (\n    viewRef: React.ElementRef<NativeType>,\n    value: boolean,\n  ) => void;\n}\n\nexport const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: ['setNativeRefreshing'],\n});\n\nexport default (codegenNativeComponent<NativeProps>(\n  'AndroidSwipeRefreshLayout',\n): NativeType);\n"],"mappings":";;;AAmBA,OAAOA,qBAAqB,MAAM,uCAAuC;AACzE,OAAOC,sBAAsB,MAAM,wCAAwC;AAC3E,OAAO,KAAKC,KAAK,MAAM,OAAO;AAP9B,IAAMC,uBAAuB,GAAGC,OAAO,CAAC,gEAAgE,CAAC;AACzG,IAAAC,QAAA,GAA4CD,OAAO,CAAC,yDAAyD,CAAC;EAAvGE,iCAAiC,GAAAD,QAAA,CAAjCC,iCAAiC;AACxC,IAAAC,SAAA,GAA0BH,OAAO,CAAC,kDAAkD,CAAC;EAA9EI,eAAe,GAAAD,SAAA,CAAfC,eAAe;AAEtB,IAAIC,mBAAmB,GAAG,2BAA2B;AAGrD,OAAO,IAAMC,sBAAsB,GAAG;EACpCC,eAAe,EAAE,2BAA2B;EAE5CC,gBAAgB,EAAE;IAChBC,UAAU,EAAE;MACVC,gBAAgB,EAAE;IACpB;EACF,CAAC;EAEDC,eAAe,EAAAC,aAAA;IACbC,OAAO,EAAE,IAAI;IAEbC,MAAM,EAAE;MACNC,OAAO,EAAEf,OAAO,CAAC,qDAAqD;IACxE,CAAC;IAEDgB,uBAAuB,EAAE;MACvBD,OAAO,EAAEf,OAAO,CAAC,gDAAgD,CAAC,CAACiB;IACrE,CAAC;IAEDC,IAAI,EAAE,IAAI;IACVC,kBAAkB,EAAE,IAAI;IACxBC,UAAU,EAAE;EAAI,GAEblB,iCAAiC,CAAC;IACnCmB,SAAS,EAAE;EACb,CAAC,CAAC;AAEN,CAAC;AAED,eAAetB,uBAAuB,CAACuB,GAAG,CAACjB,mBAAmB,EAAE;EAAA,OAAMC,sBAAsB;AAAA,EAAC;AAE7F,OAAO,IAAMiB,QAAQ,GAAG;EACpBC,mBAAmB,WAAAA,oBAACC,GAAG,EAAEC,KAAK,EAAE;IAC5BtB,eAAe,CAACqB,GAAG,EAAE,qBAAqB,EAAE,CAACC,KAAK,CAAC,CAAC;EACxD;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}