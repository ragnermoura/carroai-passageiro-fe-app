{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _global$nativeQPLTime;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as Systrace from '../Performance/Systrace';\nimport ReactNativeFeatureFlags from '../ReactNative/ReactNativeFeatureFlags';\nimport NativePerformance from '../WebPerformance/NativePerformance';\nimport infoLog from './infoLog';\nvar _cookies = {};\nvar PRINT_TO_CONSOLE = false;\nvar WEB_PERFORMANCE_PREFIX = 'global_perf_';\nexport var getCurrentTimestamp = (_global$nativeQPLTime = global.nativeQPLTimestamp) != null ? _global$nativeQPLTime : function () {\n  return global.performance.now();\n};\nvar PerformanceLogger = function () {\n  function PerformanceLogger(isGlobalLogger) {\n    _classCallCheck(this, PerformanceLogger);\n    this._timespans = {};\n    this._extras = {};\n    this._points = {};\n    this._pointExtras = {};\n    this._closed = false;\n    this._isGlobalLogger = false;\n    this._isGlobalLogger = isGlobalLogger === true;\n  }\n  return _createClass(PerformanceLogger, [{\n    key: \"_isLoggingForWebPerformance\",\n    value: function _isLoggingForWebPerformance() {\n      if (!this._isGlobalLogger || NativePerformance == null) {\n        return false;\n      }\n      if (this._isGlobalWebPerformanceLoggerEnabled == null) {\n        this._isGlobalWebPerformanceLoggerEnabled = ReactNativeFeatureFlags.isGlobalWebPerformanceLoggerEnabled();\n      }\n      return this._isGlobalWebPerformanceLoggerEnabled === true;\n    }\n  }, {\n    key: \"_performanceMark\",\n    value: function _performanceMark(key, startTime) {\n      if (this._isLoggingForWebPerformance()) {\n        var _global$performance;\n        (_global$performance = global.performance) == null ? void 0 : _global$performance.mark == null ? void 0 : _global$performance.mark(key, {\n          startTime: startTime\n        });\n      }\n    }\n  }, {\n    key: \"_performanceMeasure\",\n    value: function _performanceMeasure(key, start, end) {\n      if (this._isLoggingForWebPerformance()) {\n        var _global$performance2;\n        (_global$performance2 = global.performance) == null ? void 0 : _global$performance2.measure == null ? void 0 : _global$performance2.measure(key, {\n          start: start,\n          end: end\n        });\n      }\n    }\n  }, {\n    key: \"addTimespan\",\n    value: function addTimespan(key, startTime, endTime, startExtras, endExtras) {\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: addTimespan - has closed ignoring: ', key);\n        }\n        return;\n      }\n      if (this._timespans[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to add a timespan that already exists ', key);\n        }\n        return;\n      }\n      this._timespans[key] = {\n        startTime: startTime,\n        endTime: endTime,\n        totalTime: endTime - (startTime || 0),\n        startExtras: startExtras,\n        endExtras: endExtras\n      };\n      this._performanceMeasure(`${WEB_PERFORMANCE_PREFIX}_${key}`, startTime, endTime);\n    }\n  }, {\n    key: \"append\",\n    value: function append(performanceLogger) {\n      this._timespans = _objectSpread(_objectSpread({}, performanceLogger.getTimespans()), this._timespans);\n      this._extras = _objectSpread(_objectSpread({}, performanceLogger.getExtras()), this._extras);\n      this._points = _objectSpread(_objectSpread({}, performanceLogger.getPoints()), this._points);\n      this._pointExtras = _objectSpread(_objectSpread({}, performanceLogger.getPointExtras()), this._pointExtras);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._timespans = {};\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clear');\n      }\n    }\n  }, {\n    key: \"clearCompleted\",\n    value: function clearCompleted() {\n      for (var _key in this._timespans) {\n        var _this$_timespans$_key;\n        if (((_this$_timespans$_key = this._timespans[_key]) == null ? void 0 : _this$_timespans$_key.totalTime) != null) {\n          delete this._timespans[_key];\n        }\n      }\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clearCompleted');\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._closed = true;\n    }\n  }, {\n    key: \"currentTimestamp\",\n    value: function currentTimestamp() {\n      return getCurrentTimestamp();\n    }\n  }, {\n    key: \"getExtras\",\n    value: function getExtras() {\n      return this._extras;\n    }\n  }, {\n    key: \"getPoints\",\n    value: function getPoints() {\n      return this._points;\n    }\n  }, {\n    key: \"getPointExtras\",\n    value: function getPointExtras() {\n      return this._pointExtras;\n    }\n  }, {\n    key: \"getTimespans\",\n    value: function getTimespans() {\n      return this._timespans;\n    }\n  }, {\n    key: \"hasTimespan\",\n    value: function hasTimespan(key) {\n      return !!this._timespans[key];\n    }\n  }, {\n    key: \"isClosed\",\n    value: function isClosed() {\n      return this._closed;\n    }\n  }, {\n    key: \"logEverything\",\n    value: function logEverything() {\n      if (PRINT_TO_CONSOLE) {\n        for (var _key2 in this._timespans) {\n          var _this$_timespans$_key2;\n          if (((_this$_timespans$_key2 = this._timespans[_key2]) == null ? void 0 : _this$_timespans$_key2.totalTime) != null) {\n            infoLog(_key2 + ': ' + this._timespans[_key2].totalTime + 'ms');\n          }\n        }\n        infoLog(this._extras);\n        for (var _key3 in this._points) {\n          if (this._points[_key3] != null) {\n            infoLog(_key3 + ': ' + this._points[_key3] + 'ms');\n          }\n        }\n      }\n    }\n  }, {\n    key: \"markPoint\",\n    value: function markPoint(key) {\n      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();\n      var extras = arguments.length > 2 ? arguments[2] : undefined;\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: markPoint - has closed ignoring: ', key);\n        }\n        return;\n      }\n      if (this._points[key] != null) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to mark a point that has been already logged ', key);\n        }\n        return;\n      }\n      this._points[key] = timestamp;\n      if (extras) {\n        this._pointExtras[key] = extras;\n      }\n      this._performanceMark(`${WEB_PERFORMANCE_PREFIX}_${key}`, timestamp);\n    }\n  }, {\n    key: \"removeExtra\",\n    value: function removeExtra(key) {\n      var value = this._extras[key];\n      delete this._extras[key];\n      return value;\n    }\n  }, {\n    key: \"setExtra\",\n    value: function setExtra(key, value) {\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: setExtra - has closed ignoring: ', key);\n        }\n        return;\n      }\n      if (this._extras.hasOwnProperty(key)) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to set an extra that already exists ', {\n            key: key,\n            currentValue: this._extras[key],\n            attemptedValue: value\n          });\n        }\n        return;\n      }\n      this._extras[key] = value;\n    }\n  }, {\n    key: \"startTimespan\",\n    value: function startTimespan(key) {\n      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();\n      var extras = arguments.length > 2 ? arguments[2] : undefined;\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: startTimespan - has closed ignoring: ', key);\n        }\n        return;\n      }\n      if (this._timespans[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to start a timespan that already exists ', key);\n        }\n        return;\n      }\n      this._timespans[key] = {\n        startTime: timestamp,\n        startExtras: extras\n      };\n      _cookies[key] = Systrace.beginAsyncEvent(key);\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'start: ' + key);\n      }\n      this._performanceMark(`${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`, timestamp);\n    }\n  }, {\n    key: \"stopTimespan\",\n    value: function stopTimespan(key) {\n      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();\n      var extras = arguments.length > 2 ? arguments[2] : undefined;\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: stopTimespan - has closed ignoring: ', key);\n        }\n        return;\n      }\n      var timespan = this._timespans[key];\n      if (!timespan || timespan.startTime == null) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to end a timespan that has not started ', key);\n        }\n        return;\n      }\n      if (timespan.endTime != null) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to end a timespan that has already ended ', key);\n        }\n        return;\n      }\n      timespan.endExtras = extras;\n      timespan.endTime = timestamp;\n      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'end: ' + key);\n      }\n      if (_cookies[key] != null) {\n        Systrace.endAsyncEvent(key, _cookies[key]);\n        delete _cookies[key];\n      }\n      this._performanceMeasure(`${WEB_PERFORMANCE_PREFIX}_${key}`, `${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`, timestamp);\n    }\n  }]);\n}();\nexport default function createPerformanceLogger(isGlobalLogger) {\n  return new PerformanceLogger(isGlobalLogger);\n}","map":{"version":3,"names":["Systrace","ReactNativeFeatureFlags","NativePerformance","infoLog","_cookies","PRINT_TO_CONSOLE","WEB_PERFORMANCE_PREFIX","getCurrentTimestamp","_global$nativeQPLTime","global","nativeQPLTimestamp","performance","now","PerformanceLogger","isGlobalLogger","_classCallCheck","_timespans","_extras","_points","_pointExtras","_closed","_isGlobalLogger","_createClass","key","value","_isLoggingForWebPerformance","_isGlobalWebPerformanceLoggerEnabled","isGlobalWebPerformanceLoggerEnabled","_performanceMark","startTime","_global$performance","mark","_performanceMeasure","start","end","_global$performance2","measure","addTimespan","endTime","startExtras","endExtras","__DEV__","totalTime","append","performanceLogger","_objectSpread","getTimespans","getExtras","getPoints","getPointExtras","clear","clearCompleted","_this$_timespans$_key","close","currentTimestamp","hasTimespan","isClosed","logEverything","_this$_timespans$_key2","markPoint","timestamp","arguments","length","undefined","extras","removeExtra","setExtra","hasOwnProperty","currentValue","attemptedValue","startTimespan","beginAsyncEvent","stopTimespan","timespan","endAsyncEvent","createPerformanceLogger"],"sources":["C:/Users/dudug/OneDrive/Área de Trabalho/projetos-reactnative/carroai-passageiro-fe-app/node_modules/react-native/Libraries/Utilities/createPerformanceLogger.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {\n  Extras,\n  ExtraValue,\n  IPerformanceLogger,\n  Timespan,\n} from './IPerformanceLogger';\n\nimport * as Systrace from '../Performance/Systrace';\nimport ReactNativeFeatureFlags from '../ReactNative/ReactNativeFeatureFlags';\nimport NativePerformance from '../WebPerformance/NativePerformance';\nimport infoLog from './infoLog';\n\nconst _cookies: {[key: string]: number, ...} = {};\n\nconst PRINT_TO_CONSOLE: false = false; // Type as false to prevent accidentally committing `true`;\n\n// This is the prefix for optional logging points/timespans as marks/measures via Performance API,\n// used to separate these internally from other marks/measures\nconst WEB_PERFORMANCE_PREFIX = 'global_perf_';\n\nexport const getCurrentTimestamp: () => number =\n  global.nativeQPLTimestamp ?? (() => global.performance.now());\n\nclass PerformanceLogger implements IPerformanceLogger {\n  _timespans: {[key: string]: ?Timespan} = {};\n  _extras: {[key: string]: ?ExtraValue} = {};\n  _points: {[key: string]: ?number} = {};\n  _pointExtras: {[key: string]: ?Extras, ...} = {};\n  _closed: boolean = false;\n  _isGlobalLogger: boolean = false;\n  _isGlobalWebPerformanceLoggerEnabled: ?boolean;\n\n  constructor(isGlobalLogger?: boolean) {\n    this._isGlobalLogger = isGlobalLogger === true;\n  }\n\n  _isLoggingForWebPerformance(): boolean {\n    if (!this._isGlobalLogger || NativePerformance == null) {\n      return false;\n    }\n    if (this._isGlobalWebPerformanceLoggerEnabled == null) {\n      this._isGlobalWebPerformanceLoggerEnabled =\n        ReactNativeFeatureFlags.isGlobalWebPerformanceLoggerEnabled();\n    }\n    return this._isGlobalWebPerformanceLoggerEnabled === true;\n  }\n\n  // NOTE: The Performance.mark/measure calls are wrapped here to ensure that\n  // we are safe from the cases when the global 'peformance' object is still not yet defined.\n  // It is only necessary in this file because of potential race conditions in the initialization\n  // order between 'createPerformanceLogger' and 'setUpPerformance'.\n  //\n  // In most of the other cases this kind of check for `performance` being defined\n  // wouldn't be necessary.\n  _performanceMark(key: string, startTime: number) {\n    if (this._isLoggingForWebPerformance()) {\n      global.performance?.mark?.(key, {\n        startTime,\n      });\n    }\n  }\n\n  _performanceMeasure(\n    key: string,\n    start: number | string,\n    end: number | string,\n  ) {\n    if (this._isLoggingForWebPerformance()) {\n      global.performance?.measure?.(key, {\n        start,\n        end,\n      });\n    }\n  }\n\n  addTimespan(\n    key: string,\n    startTime: number,\n    endTime: number,\n    startExtras?: Extras,\n    endExtras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: addTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._timespans[key]) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to add a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    this._timespans[key] = {\n      startTime,\n      endTime,\n      totalTime: endTime - (startTime || 0),\n      startExtras,\n      endExtras,\n    };\n\n    this._performanceMeasure(\n      `${WEB_PERFORMANCE_PREFIX}_${key}`,\n      startTime,\n      endTime,\n    );\n  }\n\n  append(performanceLogger: IPerformanceLogger) {\n    this._timespans = {\n      ...performanceLogger.getTimespans(),\n      ...this._timespans,\n    };\n    this._extras = {...performanceLogger.getExtras(), ...this._extras};\n    this._points = {...performanceLogger.getPoints(), ...this._points};\n    this._pointExtras = {\n      ...performanceLogger.getPointExtras(),\n      ...this._pointExtras,\n    };\n  }\n\n  clear() {\n    this._timespans = {};\n    this._extras = {};\n    this._points = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clear');\n    }\n  }\n\n  clearCompleted() {\n    for (const key in this._timespans) {\n      if (this._timespans[key]?.totalTime != null) {\n        delete this._timespans[key];\n      }\n    }\n    this._extras = {};\n    this._points = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clearCompleted');\n    }\n  }\n\n  close() {\n    this._closed = true;\n  }\n\n  currentTimestamp(): number {\n    return getCurrentTimestamp();\n  }\n\n  getExtras(): {[key: string]: ?ExtraValue} {\n    return this._extras;\n  }\n\n  getPoints(): {[key: string]: ?number} {\n    return this._points;\n  }\n\n  getPointExtras(): {[key: string]: ?Extras} {\n    return this._pointExtras;\n  }\n\n  getTimespans(): {[key: string]: ?Timespan} {\n    return this._timespans;\n  }\n\n  hasTimespan(key: string): boolean {\n    return !!this._timespans[key];\n  }\n\n  isClosed(): boolean {\n    return this._closed;\n  }\n\n  logEverything() {\n    if (PRINT_TO_CONSOLE) {\n      // log timespans\n      for (const key in this._timespans) {\n        if (this._timespans[key]?.totalTime != null) {\n          infoLog(key + ': ' + this._timespans[key].totalTime + 'ms');\n        }\n      }\n\n      // log extras\n      infoLog(this._extras);\n\n      // log points\n      for (const key in this._points) {\n        if (this._points[key] != null) {\n          infoLog(key + ': ' + this._points[key] + 'ms');\n        }\n      }\n    }\n  }\n\n  markPoint(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: markPoint - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._points[key] != null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to mark a point that has been already logged ',\n          key,\n        );\n      }\n      return;\n    }\n    this._points[key] = timestamp;\n    if (extras) {\n      this._pointExtras[key] = extras;\n    }\n\n    this._performanceMark(`${WEB_PERFORMANCE_PREFIX}_${key}`, timestamp);\n  }\n\n  removeExtra(key: string): ?ExtraValue {\n    const value = this._extras[key];\n    delete this._extras[key];\n    return value;\n  }\n\n  setExtra(key: string, value: ExtraValue) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: setExtra - has closed ignoring: ', key);\n      }\n      return;\n    }\n\n    if (this._extras.hasOwnProperty(key)) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to set an extra that already exists ',\n          {key, currentValue: this._extras[key], attemptedValue: value},\n        );\n      }\n      return;\n    }\n    this._extras[key] = value;\n  }\n\n  startTimespan(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: startTimespan - has closed ignoring: ',\n          key,\n        );\n      }\n      return;\n    }\n\n    if (this._timespans[key]) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to start a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    this._timespans[key] = {\n      startTime: timestamp,\n      startExtras: extras,\n    };\n    _cookies[key] = Systrace.beginAsyncEvent(key);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'start: ' + key);\n    }\n\n    this._performanceMark(\n      `${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`,\n      timestamp,\n    );\n  }\n\n  stopTimespan(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: stopTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n\n    const timespan = this._timespans[key];\n    if (!timespan || timespan.startTime == null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has not started ',\n          key,\n        );\n      }\n      return;\n    }\n    if (timespan.endTime != null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has already ended ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespan.endExtras = extras;\n    timespan.endTime = timestamp;\n    timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'end: ' + key);\n    }\n\n    if (_cookies[key] != null) {\n      Systrace.endAsyncEvent(key, _cookies[key]);\n      delete _cookies[key];\n    }\n\n    this._performanceMeasure(\n      `${WEB_PERFORMANCE_PREFIX}_${key}`,\n      `${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`,\n      timestamp,\n    );\n  }\n}\n\n// Re-exporting for backwards compatibility with all the clients that\n// may still import it from this module.\nexport type {Extras, ExtraValue, IPerformanceLogger, Timespan};\n\n/**\n * This function creates performance loggers that can be used to collect and log\n * various performance data such as timespans, points and extras.\n * The loggers need to have minimal overhead since they're used in production.\n */\nexport default function createPerformanceLogger(\n  isGlobalLogger?: boolean,\n): IPerformanceLogger {\n  return new PerformanceLogger(isGlobalLogger);\n}\n"],"mappings":";;;;;;AAiBA,OAAO,KAAKA,QAAQ,MAAM,yBAAyB;AACnD,OAAOC,uBAAuB,MAAM,wCAAwC;AAC5E,OAAOC,iBAAiB,MAAM,qCAAqC;AACnE,OAAOC,OAAO,MAAM,WAAW;AAE/B,IAAMC,QAAsC,GAAG,CAAC,CAAC;AAEjD,IAAMC,gBAAuB,GAAG,KAAK;AAIrC,IAAMC,sBAAsB,GAAG,cAAc;AAE7C,OAAO,IAAMC,mBAAiC,IAAAC,qBAAA,GAC5CC,MAAM,CAACC,kBAAkB,YAAAF,qBAAA,GAAK;EAAA,OAAMC,MAAM,CAACE,WAAW,CAACC,GAAG,CAAC,CAAC;AAAA,CAAC;AAAC,IAE1DC,iBAAiB;EASrB,SAAAA,kBAAYC,cAAwB,EAAE;IAAAC,eAAA,OAAAF,iBAAA;IAAA,KARtCG,UAAU,GAA+B,CAAC,CAAC;IAAA,KAC3CC,OAAO,GAAiC,CAAC,CAAC;IAAA,KAC1CC,OAAO,GAA6B,CAAC,CAAC;IAAA,KACtCC,YAAY,GAAkC,CAAC,CAAC;IAAA,KAChDC,OAAO,GAAY,KAAK;IAAA,KACxBC,eAAe,GAAY,KAAK;IAI9B,IAAI,CAACA,eAAe,GAAGP,cAAc,KAAK,IAAI;EAChD;EAAC,OAAAQ,YAAA,CAAAT,iBAAA;IAAAU,GAAA;IAAAC,KAAA,EAED,SAAAC,4BAAA,EAAuC;MACrC,IAAI,CAAC,IAAI,CAACJ,eAAe,IAAInB,iBAAiB,IAAI,IAAI,EAAE;QACtD,OAAO,KAAK;MACd;MACA,IAAI,IAAI,CAACwB,oCAAoC,IAAI,IAAI,EAAE;QACrD,IAAI,CAACA,oCAAoC,GACvCzB,uBAAuB,CAAC0B,mCAAmC,CAAC,CAAC;MACjE;MACA,OAAO,IAAI,CAACD,oCAAoC,KAAK,IAAI;IAC3D;EAAC;IAAAH,GAAA;IAAAC,KAAA,EASD,SAAAI,iBAAiBL,GAAW,EAAEM,SAAiB,EAAE;MAC/C,IAAI,IAAI,CAACJ,2BAA2B,CAAC,CAAC,EAAE;QAAA,IAAAK,mBAAA;QACtC,CAAAA,mBAAA,GAAArB,MAAM,CAACE,WAAW,qBAAlBmB,mBAAA,CAAoBC,IAAI,oBAAxBD,mBAAA,CAAoBC,IAAI,CAAGR,GAAG,EAAE;UAC9BM,SAAS,EAATA;QACF,CAAC,CAAC;MACJ;IACF;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAED,SAAAQ,oBACET,GAAW,EACXU,KAAsB,EACtBC,GAAoB,EACpB;MACA,IAAI,IAAI,CAACT,2BAA2B,CAAC,CAAC,EAAE;QAAA,IAAAU,oBAAA;QACtC,CAAAA,oBAAA,GAAA1B,MAAM,CAACE,WAAW,qBAAlBwB,oBAAA,CAAoBC,OAAO,oBAA3BD,oBAAA,CAAoBC,OAAO,CAAGb,GAAG,EAAE;UACjCU,KAAK,EAALA,KAAK;UACLC,GAAG,EAAHA;QACF,CAAC,CAAC;MACJ;IACF;EAAC;IAAAX,GAAA;IAAAC,KAAA,EAED,SAAAa,YACEd,GAAW,EACXM,SAAiB,EACjBS,OAAe,EACfC,WAAoB,EACpBC,SAAkB,EAClB;MACA,IAAI,IAAI,CAACpB,OAAO,EAAE;QAChB,IAAIf,gBAAgB,IAAIoC,OAAO,EAAE;UAC/BtC,OAAO,CAAC,wDAAwD,EAAEoB,GAAG,CAAC;QACxE;QACA;MACF;MACA,IAAI,IAAI,CAACP,UAAU,CAACO,GAAG,CAAC,EAAE;QACxB,IAAIlB,gBAAgB,IAAIoC,OAAO,EAAE;UAC/BtC,OAAO,CACL,sEAAsE,EACtEoB,GACF,CAAC;QACH;QACA;MACF;MAEA,IAAI,CAACP,UAAU,CAACO,GAAG,CAAC,GAAG;QACrBM,SAAS,EAATA,SAAS;QACTS,OAAO,EAAPA,OAAO;QACPI,SAAS,EAAEJ,OAAO,IAAIT,SAAS,IAAI,CAAC,CAAC;QACrCU,WAAW,EAAXA,WAAW;QACXC,SAAS,EAATA;MACF,CAAC;MAED,IAAI,CAACR,mBAAmB,CACrB,GAAE1B,sBAAuB,IAAGiB,GAAI,EAAC,EAClCM,SAAS,EACTS,OACF,CAAC;IACH;EAAC;IAAAf,GAAA;IAAAC,KAAA,EAED,SAAAmB,OAAOC,iBAAqC,EAAE;MAC5C,IAAI,CAAC5B,UAAU,GAAA6B,aAAA,CAAAA,aAAA,KACVD,iBAAiB,CAACE,YAAY,CAAC,CAAC,GAChC,IAAI,CAAC9B,UAAU,CACnB;MACD,IAAI,CAACC,OAAO,GAAA4B,aAAA,CAAAA,aAAA,KAAOD,iBAAiB,CAACG,SAAS,CAAC,CAAC,GAAK,IAAI,CAAC9B,OAAO,CAAC;MAClE,IAAI,CAACC,OAAO,GAAA2B,aAAA,CAAAA,aAAA,KAAOD,iBAAiB,CAACI,SAAS,CAAC,CAAC,GAAK,IAAI,CAAC9B,OAAO,CAAC;MAClE,IAAI,CAACC,YAAY,GAAA0B,aAAA,CAAAA,aAAA,KACZD,iBAAiB,CAACK,cAAc,CAAC,CAAC,GAClC,IAAI,CAAC9B,YAAY,CACrB;IACH;EAAC;IAAAI,GAAA;IAAAC,KAAA,EAED,SAAA0B,MAAA,EAAQ;MACN,IAAI,CAAClC,UAAU,GAAG,CAAC,CAAC;MACpB,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;MACjB,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;MACjB,IAAIb,gBAAgB,EAAE;QACpBF,OAAO,CAAC,sBAAsB,EAAE,OAAO,CAAC;MAC1C;IACF;EAAC;IAAAoB,GAAA;IAAAC,KAAA,EAED,SAAA2B,eAAA,EAAiB;MACf,KAAK,IAAM5B,IAAG,IAAI,IAAI,CAACP,UAAU,EAAE;QAAA,IAAAoC,qBAAA;QACjC,IAAI,EAAAA,qBAAA,OAAI,CAACpC,UAAU,CAACO,IAAG,CAAC,qBAApB6B,qBAAA,CAAsBV,SAAS,KAAI,IAAI,EAAE;UAC3C,OAAO,IAAI,CAAC1B,UAAU,CAACO,IAAG,CAAC;QAC7B;MACF;MACA,IAAI,CAACN,OAAO,GAAG,CAAC,CAAC;MACjB,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;MACjB,IAAIb,gBAAgB,EAAE;QACpBF,OAAO,CAAC,sBAAsB,EAAE,gBAAgB,CAAC;MACnD;IACF;EAAC;IAAAoB,GAAA;IAAAC,KAAA,EAED,SAAA6B,MAAA,EAAQ;MACN,IAAI,CAACjC,OAAO,GAAG,IAAI;IACrB;EAAC;IAAAG,GAAA;IAAAC,KAAA,EAED,SAAA8B,iBAAA,EAA2B;MACzB,OAAO/C,mBAAmB,CAAC,CAAC;IAC9B;EAAC;IAAAgB,GAAA;IAAAC,KAAA,EAED,SAAAuB,UAAA,EAA0C;MACxC,OAAO,IAAI,CAAC9B,OAAO;IACrB;EAAC;IAAAM,GAAA;IAAAC,KAAA,EAED,SAAAwB,UAAA,EAAsC;MACpC,OAAO,IAAI,CAAC9B,OAAO;IACrB;EAAC;IAAAK,GAAA;IAAAC,KAAA,EAED,SAAAyB,eAAA,EAA2C;MACzC,OAAO,IAAI,CAAC9B,YAAY;IAC1B;EAAC;IAAAI,GAAA;IAAAC,KAAA,EAED,SAAAsB,aAAA,EAA2C;MACzC,OAAO,IAAI,CAAC9B,UAAU;IACxB;EAAC;IAAAO,GAAA;IAAAC,KAAA,EAED,SAAA+B,YAAYhC,GAAW,EAAW;MAChC,OAAO,CAAC,CAAC,IAAI,CAACP,UAAU,CAACO,GAAG,CAAC;IAC/B;EAAC;IAAAA,GAAA;IAAAC,KAAA,EAED,SAAAgC,SAAA,EAAoB;MAClB,OAAO,IAAI,CAACpC,OAAO;IACrB;EAAC;IAAAG,GAAA;IAAAC,KAAA,EAED,SAAAiC,cAAA,EAAgB;MACd,IAAIpD,gBAAgB,EAAE;QAEpB,KAAK,IAAMkB,KAAG,IAAI,IAAI,CAACP,UAAU,EAAE;UAAA,IAAA0C,sBAAA;UACjC,IAAI,EAAAA,sBAAA,OAAI,CAAC1C,UAAU,CAACO,KAAG,CAAC,qBAApBmC,sBAAA,CAAsBhB,SAAS,KAAI,IAAI,EAAE;YAC3CvC,OAAO,CAACoB,KAAG,GAAG,IAAI,GAAG,IAAI,CAACP,UAAU,CAACO,KAAG,CAAC,CAACmB,SAAS,GAAG,IAAI,CAAC;UAC7D;QACF;QAGAvC,OAAO,CAAC,IAAI,CAACc,OAAO,CAAC;QAGrB,KAAK,IAAMM,KAAG,IAAI,IAAI,CAACL,OAAO,EAAE;UAC9B,IAAI,IAAI,CAACA,OAAO,CAACK,KAAG,CAAC,IAAI,IAAI,EAAE;YAC7BpB,OAAO,CAACoB,KAAG,GAAG,IAAI,GAAG,IAAI,CAACL,OAAO,CAACK,KAAG,CAAC,GAAG,IAAI,CAAC;UAChD;QACF;MACF;IACF;EAAC;IAAAA,GAAA;IAAAC,KAAA,EAED,SAAAmC,UACEpC,GAAW,EAGX;MAAA,IAFAqC,SAAkB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGtD,mBAAmB,CAAC,CAAC;MAAA,IAC1CyD,MAAe,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;MAEf,IAAI,IAAI,CAAC3C,OAAO,EAAE;QAChB,IAAIf,gBAAgB,IAAIoC,OAAO,EAAE;UAC/BtC,OAAO,CAAC,sDAAsD,EAAEoB,GAAG,CAAC;QACtE;QACA;MACF;MACA,IAAI,IAAI,CAACL,OAAO,CAACK,GAAG,CAAC,IAAI,IAAI,EAAE;QAC7B,IAAIlB,gBAAgB,IAAIoC,OAAO,EAAE;UAC/BtC,OAAO,CACL,6EAA6E,EAC7EoB,GACF,CAAC;QACH;QACA;MACF;MACA,IAAI,CAACL,OAAO,CAACK,GAAG,CAAC,GAAGqC,SAAS;MAC7B,IAAII,MAAM,EAAE;QACV,IAAI,CAAC7C,YAAY,CAACI,GAAG,CAAC,GAAGyC,MAAM;MACjC;MAEA,IAAI,CAACpC,gBAAgB,CAAE,GAAEtB,sBAAuB,IAAGiB,GAAI,EAAC,EAAEqC,SAAS,CAAC;IACtE;EAAC;IAAArC,GAAA;IAAAC,KAAA,EAED,SAAAyC,YAAY1C,GAAW,EAAe;MACpC,IAAMC,KAAK,GAAG,IAAI,CAACP,OAAO,CAACM,GAAG,CAAC;MAC/B,OAAO,IAAI,CAACN,OAAO,CAACM,GAAG,CAAC;MACxB,OAAOC,KAAK;IACd;EAAC;IAAAD,GAAA;IAAAC,KAAA,EAED,SAAA0C,SAAS3C,GAAW,EAAEC,KAAiB,EAAE;MACvC,IAAI,IAAI,CAACJ,OAAO,EAAE;QAChB,IAAIf,gBAAgB,IAAIoC,OAAO,EAAE;UAC/BtC,OAAO,CAAC,qDAAqD,EAAEoB,GAAG,CAAC;QACrE;QACA;MACF;MAEA,IAAI,IAAI,CAACN,OAAO,CAACkD,cAAc,CAAC5C,GAAG,CAAC,EAAE;QACpC,IAAIlB,gBAAgB,IAAIoC,OAAO,EAAE;UAC/BtC,OAAO,CACL,oEAAoE,EACpE;YAACoB,GAAG,EAAHA,GAAG;YAAE6C,YAAY,EAAE,IAAI,CAACnD,OAAO,CAACM,GAAG,CAAC;YAAE8C,cAAc,EAAE7C;UAAK,CAC9D,CAAC;QACH;QACA;MACF;MACA,IAAI,CAACP,OAAO,CAACM,GAAG,CAAC,GAAGC,KAAK;IAC3B;EAAC;IAAAD,GAAA;IAAAC,KAAA,EAED,SAAA8C,cACE/C,GAAW,EAGX;MAAA,IAFAqC,SAAkB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGtD,mBAAmB,CAAC,CAAC;MAAA,IAC1CyD,MAAe,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;MAEf,IAAI,IAAI,CAAC3C,OAAO,EAAE;QAChB,IAAIf,gBAAgB,IAAIoC,OAAO,EAAE;UAC/BtC,OAAO,CACL,0DAA0D,EAC1DoB,GACF,CAAC;QACH;QACA;MACF;MAEA,IAAI,IAAI,CAACP,UAAU,CAACO,GAAG,CAAC,EAAE;QACxB,IAAIlB,gBAAgB,IAAIoC,OAAO,EAAE;UAC/BtC,OAAO,CACL,wEAAwE,EACxEoB,GACF,CAAC;QACH;QACA;MACF;MAEA,IAAI,CAACP,UAAU,CAACO,GAAG,CAAC,GAAG;QACrBM,SAAS,EAAE+B,SAAS;QACpBrB,WAAW,EAAEyB;MACf,CAAC;MACD5D,QAAQ,CAACmB,GAAG,CAAC,GAAGvB,QAAQ,CAACuE,eAAe,CAAChD,GAAG,CAAC;MAC7C,IAAIlB,gBAAgB,EAAE;QACpBF,OAAO,CAAC,sBAAsB,EAAE,SAAS,GAAGoB,GAAG,CAAC;MAClD;MAEA,IAAI,CAACK,gBAAgB,CAClB,GAAEtB,sBAAuB,mBAAkBiB,GAAI,EAAC,EACjDqC,SACF,CAAC;IACH;EAAC;IAAArC,GAAA;IAAAC,KAAA,EAED,SAAAgD,aACEjD,GAAW,EAGX;MAAA,IAFAqC,SAAkB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGtD,mBAAmB,CAAC,CAAC;MAAA,IAC1CyD,MAAe,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;MAEf,IAAI,IAAI,CAAC3C,OAAO,EAAE;QAChB,IAAIf,gBAAgB,IAAIoC,OAAO,EAAE;UAC/BtC,OAAO,CAAC,yDAAyD,EAAEoB,GAAG,CAAC;QACzE;QACA;MACF;MAEA,IAAMkD,QAAQ,GAAG,IAAI,CAACzD,UAAU,CAACO,GAAG,CAAC;MACrC,IAAI,CAACkD,QAAQ,IAAIA,QAAQ,CAAC5C,SAAS,IAAI,IAAI,EAAE;QAC3C,IAAIxB,gBAAgB,IAAIoC,OAAO,EAAE;UAC/BtC,OAAO,CACL,uEAAuE,EACvEoB,GACF,CAAC;QACH;QACA;MACF;MACA,IAAIkD,QAAQ,CAACnC,OAAO,IAAI,IAAI,EAAE;QAC5B,IAAIjC,gBAAgB,IAAIoC,OAAO,EAAE;UAC/BtC,OAAO,CACL,yEAAyE,EACzEoB,GACF,CAAC;QACH;QACA;MACF;MAEAkD,QAAQ,CAACjC,SAAS,GAAGwB,MAAM;MAC3BS,QAAQ,CAACnC,OAAO,GAAGsB,SAAS;MAC5Ba,QAAQ,CAAC/B,SAAS,GAAG+B,QAAQ,CAACnC,OAAO,IAAImC,QAAQ,CAAC5C,SAAS,IAAI,CAAC,CAAC;MACjE,IAAIxB,gBAAgB,EAAE;QACpBF,OAAO,CAAC,sBAAsB,EAAE,OAAO,GAAGoB,GAAG,CAAC;MAChD;MAEA,IAAInB,QAAQ,CAACmB,GAAG,CAAC,IAAI,IAAI,EAAE;QACzBvB,QAAQ,CAAC0E,aAAa,CAACnD,GAAG,EAAEnB,QAAQ,CAACmB,GAAG,CAAC,CAAC;QAC1C,OAAOnB,QAAQ,CAACmB,GAAG,CAAC;MACtB;MAEA,IAAI,CAACS,mBAAmB,CACrB,GAAE1B,sBAAuB,IAAGiB,GAAI,EAAC,EACjC,GAAEjB,sBAAuB,mBAAkBiB,GAAI,EAAC,EACjDqC,SACF,CAAC;IACH;EAAC;AAAA;AAYH,eAAe,SAASe,uBAAuBA,CAC7C7D,cAAwB,EACJ;EACpB,OAAO,IAAID,iBAAiB,CAACC,cAAc,CAAC;AAC9C"},"metadata":{},"sourceType":"module","externalDependencies":[]}