{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\dudug\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\projetos-reactnative\\\\carroai-passageiro-fe-app\\\\node_modules\\\\react-native\\\\Libraries\\\\LogBox\\\\UI\\\\LogBoxButton.js\";\nimport TouchableWithoutFeedback from '../../Components/Touchable/TouchableWithoutFeedback';\nimport View from '../../Components/View/View';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport * as LogBoxStyle from './LogBoxStyle';\nimport * as React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LogBoxButton(props) {\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    pressed = _React$useState2[0],\n    setPressed = _React$useState2[1];\n  var backgroundColor = props.backgroundColor;\n  if (!backgroundColor) {\n    backgroundColor = {\n      default: LogBoxStyle.getBackgroundColor(0.95),\n      pressed: LogBoxStyle.getBackgroundColor(0.6)\n    };\n  }\n  var content = _jsxDEV(View, {\n    style: StyleSheet.compose({\n      backgroundColor: pressed ? backgroundColor.pressed : backgroundColor.default\n    }, props.style),\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n  return props.onPress == null ? content : _jsxDEV(TouchableWithoutFeedback, {\n    hitSlop: props.hitSlop,\n    onPress: props.onPress,\n    onPressIn: function onPressIn() {\n      return setPressed(true);\n    },\n    onPressOut: function onPressOut() {\n      return setPressed(false);\n    },\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\nexport default LogBoxButton;","map":{"version":3,"names":["TouchableWithoutFeedback","View","StyleSheet","LogBoxStyle","React","jsxDEV","_jsxDEV","LogBoxButton","props","_React$useState","useState","_React$useState2","_slicedToArray","pressed","setPressed","backgroundColor","default","getBackgroundColor","content","style","compose","children","fileName","_jsxFileName","lineNumber","columnNumber","onPress","hitSlop","onPressIn","onPressOut"],"sources":["C:/Users/dudug/OneDrive/√Årea de Trabalho/projetos-reactnative/carroai-passageiro-fe-app/node_modules/react-native/Libraries/LogBox/UI/LogBoxButton.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {EdgeInsetsProp} from '../../StyleSheet/EdgeInsetsPropType';\nimport type {ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {PressEvent} from '../../Types/CoreEventTypes';\n\nimport TouchableWithoutFeedback from '../../Components/Touchable/TouchableWithoutFeedback';\nimport View from '../../Components/View/View';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport * as LogBoxStyle from './LogBoxStyle';\nimport * as React from 'react';\n\ntype Props = $ReadOnly<{|\n  backgroundColor: $ReadOnly<{|\n    default: string,\n    pressed: string,\n  |}>,\n  children?: React.Node,\n  hitSlop?: ?EdgeInsetsProp,\n  onPress?: ?(event: PressEvent) => void,\n  style?: ViewStyleProp,\n|}>;\n\nfunction LogBoxButton(props: Props): React.Node {\n  const [pressed, setPressed] = React.useState(false);\n\n  let backgroundColor = props.backgroundColor;\n  if (!backgroundColor) {\n    backgroundColor = {\n      default: LogBoxStyle.getBackgroundColor(0.95),\n      pressed: LogBoxStyle.getBackgroundColor(0.6),\n    };\n  }\n\n  const content = (\n    <View\n      style={StyleSheet.compose(\n        {\n          backgroundColor: pressed\n            ? backgroundColor.pressed\n            : backgroundColor.default,\n        },\n        props.style,\n      )}>\n      {props.children}\n    </View>\n  );\n\n  return props.onPress == null ? (\n    content\n  ) : (\n    <TouchableWithoutFeedback\n      hitSlop={props.hitSlop}\n      onPress={props.onPress}\n      onPressIn={() => setPressed(true)}\n      onPressOut={() => setPressed(false)}>\n      {content}\n    </TouchableWithoutFeedback>\n  );\n}\n\nexport default LogBoxButton;\n"],"mappings":";;AAcA,OAAOA,wBAAwB,MAAM,qDAAqD;AAC1F,OAAOC,IAAI,MAAM,4BAA4B;AAC7C,OAAOC,UAAU,MAAM,6BAA6B;AACpD,OAAO,KAAKC,WAAW,MAAM,eAAe;AAC5C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAa/B,SAASC,YAAYA,CAACC,KAAY,EAAc;EAC9C,IAAAC,eAAA,GAA8BL,KAAK,CAACM,QAAQ,CAAC,KAAK,CAAC;IAAAC,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAA5CI,OAAO,GAAAF,gBAAA;IAAEG,UAAU,GAAAH,gBAAA;EAE1B,IAAII,eAAe,GAAGP,KAAK,CAACO,eAAe;EAC3C,IAAI,CAACA,eAAe,EAAE;IACpBA,eAAe,GAAG;MAChBC,OAAO,EAAEb,WAAW,CAACc,kBAAkB,CAAC,IAAI,CAAC;MAC7CJ,OAAO,EAAEV,WAAW,CAACc,kBAAkB,CAAC,GAAG;IAC7C,CAAC;EACH;EAEA,IAAMC,OAAO,GACXZ,OAAA,CAACL,IAAI;IACHkB,KAAK,EAAEjB,UAAU,CAACkB,OAAO,CACvB;MACEL,eAAe,EAAEF,OAAO,GACpBE,eAAe,CAACF,OAAO,GACvBE,eAAe,CAACC;IACtB,CAAC,EACDR,KAAK,CAACW,KACR,CAAE;IAAAE,QAAA,EACDb,KAAK,CAACa;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CACP;EAED,OAAOjB,KAAK,CAACkB,OAAO,IAAI,IAAI,GAC1BR,OAAO,GAEPZ,OAAA,CAACN,wBAAwB;IACvB2B,OAAO,EAAEnB,KAAK,CAACmB,OAAQ;IACvBD,OAAO,EAAElB,KAAK,CAACkB,OAAQ;IACvBE,SAAS,EAAE,SAAAA,UAAA;MAAA,OAAMd,UAAU,CAAC,IAAI,CAAC;IAAA,CAAC;IAClCe,UAAU,EAAE,SAAAA,WAAA;MAAA,OAAMf,UAAU,CAAC,KAAK,CAAC;IAAA,CAAC;IAAAO,QAAA,EACnCH;EAAO;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAC3B;AACH;AAEA,eAAelB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}